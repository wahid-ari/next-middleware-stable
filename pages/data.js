import Head from 'next/head'
import Footer from '@components/Footer'
import Navbar from '@components/Navbar'
import Layout from '@components/Layout';
import { useState, useContext, useEffect } from "react";
import { UserContext } from "@utils/useUser";
import { AxiosConfigContext } from "@utils/useAxiosConfig";
import axios from 'axios';

export default function Data() {
  const [data, setData] = useState()
  const [otherData, setOtherData] = useState()
  const [errorMessage, setErrorMessage] = useState()
  const [otherErrorMessage, setOtherErrorMessage] = useState()
  const [fetched, setFetched] = useState(false)

  // can be set up here using AxiosConfigContext, or in useAxiosConfig file it self
  // const axiosConfig = useContext(AxiosConfigContext);
  // console.log(axiosConfig.token.token)
  // if (axiosConfig.token.token) {
  //   axios.defaults.headers.common['Authorization'] = `Bearer ${axiosConfig.token.token}`;
  // } else {
  //   axios.defaults.headers.common['Authorization'] = "";
  // }

  const user = useContext(UserContext);
  const config = {
    headers: {
      Authorization: `Bearer ${user?.token}`,
    },
  };

  // console.log(user.token)

  async function getData() {
    // console.log('getData')
    try {
      const res = await axios.get('/api/data', config);
      // console.log(res.data)
      if (res.data.status === 200) {
        setData(res.data.data)
        setErrorMessage("")
        setFetched(true)
      } else {
        setErrorMessage(res.data.error)
      }
    } catch (error) {
      console.log(error);
    }
  }

  async function getOtherData() {
    try {
      const res = await axios.get('/api/data');
      // console.log(res.data)
      if (res.data.status === 200) {
        setOtherData(res.data.data)
        setOtherErrorMessage("")
        setFetched(true)
      } else {
        setOtherErrorMessage(res.data.error)
      }
    } catch (error) {
      console.log(error);
    }
  }

  useEffect(() => {
    if (!fetched) {
      getData()
      getOtherData()
    }
  }, [fetched]);

  return (
    <>
      <Head>
        <title>Data Fetching</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />

      <Layout>

        <main className="max-w-7xl mx-auto px-4 sm:px-6 md:px-8 min-h-screen">

          <section className="text-gray-600 body-font py-8">
            <h1 className="text-center font-medium text-3xl dark:text-white mb-4">Get Data From API That Required Token</h1>
            {/* <h1 className="text-center font-medium text-xl dark:text-white mb-4">{token.token}</h1> */}
            <div className="border-b dark:border-b-neutral-500"></div>
            <h1 className="text-center font-medium text-xl dark:text-white my-4">IN PAGE config token. using Token in GlobalContext that saved in localStorage. caused error if page refreshed. This because getData called before token calling from GlobalContext</h1>
            {data &&
              <>
                <h1 className="text-center font-medium dark:text-white">Name : {data.name}</h1>
                <h1 className="text-center font-medium dark:text-white">Age : {data.age}</h1>
              </>
            }
            {errorMessage &&
              <>
                <h1 className="text-center font-medium text-base text-red-500">{errorMessage}</h1>
              </>
            }
            <div className="border-b dark:border-b-neutral-500 my-4"></div>
            <h1 className="text-center font-medium text-xl dark:text-white mb-4">GLOBAL config token. using token from Cookies. Seems Ok</h1>
            {otherData &&
              <>
                <h1 className="text-center font-medium dark:text-white">Name : {otherData.name}</h1>
                <h1 className="text-center font-medium dark:text-white">Age : {otherData.age}</h1>
              </>
            }
            {otherErrorMessage &&
              <>
                <h1 className="text-center font-medium text-base text-red-500">{otherErrorMessage}</h1>
              </>
            }
          </section>

        </main>

        <Footer />

      </Layout>

    </>
  )
}
